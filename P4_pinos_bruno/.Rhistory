summary(res.aov)
# Effect size
eta_squared(res.aov)
customers_cor<-select(fcustomers,"age", "montant_total",
"panier_moyen","frequence")%>%
filter(age<=30)
cormat <- cor(customers_cor, method = "pearson")
p.mat <- cor.mtest(customers_cor)$p
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD",
"#4477AA"))
corrplot(cormat, method = "color", col = col(200),
type = "full", order = "original", number.cex = .7,
tl.col = "black", tl.srt = 90, # Text label color and rotation
# Combine with significance
p.mat = p.mat, insig = "p-value",
# hide correlation coefficient on the principal diagonal
diag = FALSE)
customers_cor<-select(fcustomers_age,"age", "montant_total", "panier_moyen", "frequence")%>%
filter(age>30 & age<=50)
customers_cor<-select(fcustomers,"age", "montant_total",
"panier_moyen", "frequence")%>%
filter(age>30 & age<=50)
cormat <- cor(customers_cor, method = "pearson")
p.mat <- cor.mtest(customers_cor)$p
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD",
"#4477AA"))
corrplot(cormat, method = "color", col = col(200),
type = "full", order = "original", number.cex = .7,
tl.col = "black", tl.srt = 90, # Text label color and rotation
# Combine with significance
p.mat = p.mat, insig = "p-value",
# hide correlation coefficient on the principal diagonal
diag = FALSE)
customers_cor<-select(fcustomers, "age", "montant_total", "panier_moyen",
"frequence")%>%
filter(age>50)
cormat <- cor(customers_cor, method = "pearson")
p.mat <- cor.mtest(customers_cor)$p
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD",
"#4477AA"))
corrplot(cormat, method = "color", col = col(200),
type = "full", order = "original", number.cex = .7,
tl.col = "black", tl.srt = 90, # Text label color and rotation
# Combine with significance
p.mat = p.mat, insig = "p-value",
# hide correlation coefficient on the principal diagonal
diag = FALSE)
customers_cor<-select(fcustomers,"age","montant_total","panier_moyen",
"frequence", "categ_0","categ_1","categ_2")
cormat <- cor(customers_cor, method = "pearson")
p.mat <- cor.mtest(customers_cor)$p
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD",
"#4477AA"))
corrplot(cormat, method = "color", col = col(200),
type = "full", order = "original", number.cex = .7,
addCoef.col = "black", # Add coefficient of correlation
tl.col = "black", tl.srt = 90, # Text label color and rotation
# Combine with significance
p.mat = p.mat, sig.level = 0.05,
# hide correlation coefficient on the principal diagonal
diag = FALSE)
res.aov <- aov( montant_total ~ categ_age,
data = fcustomers)
summary(res.aov)
# Effect size
eta_squared(res.aov)
###J'effectue un test ANOVA pour calculer l'effet des categ d'âge
###sur le panier moyen
res.aov <- aov(panier_moyen ~ categ_age , data = fcustomers)
summary(res.aov)
# Effect size
eta_squared(res.aov)
###J'effectue un test ANOVA pour calculer l'effet des categ d'âge
###sur la fréquence
res.aov <- aov( frequence ~ categ_age , data = fcustomers)
summary(res.aov)
# Effect size
eta_squared(res.aov)
summary(res.aov)
summary(res.aov)
###J'effectue un test ANOVA pour calculer l'effet des categ d'âge
###sur le panier moyen
res.aov <- aov(panier_moyen ~ categ_age , data = fcustomers)
summary(res.aov)
###J'effectue un test ANOVA pour calculer l'effet des categ d'âge
###sur le montant total
fcustomers$categ_age<-as.character(fcustomers$categ_age)
res.aov <- aov( montant_total ~ categ_age,
data = fcustomers)
summary(res.aov)
res.aov <- aov( montant_total ~ categ_age,
data = fcustomers)
summary(res.aov)
###J'effectue un test ANOVA pour calculer l'effet des categ d'âge
###sur la fréquence
res.aov <- aov( frequence ~ categ_age , data = fcustomers)
summary(res.aov)
pcor.test(fcostumers$montant_total,
fcustomers$age,
data.frame(fcustomers$categ_0,
fcustomers$categ_1,
fcustomers$categ_2),
method = c("pearson"))
data.frame(fcustomers$categ_0,
fcustomers$categ_1,
fcustomers$categ_2)
install.packages("ppcor")
library(ppcor)
pcor.test(fcostumers$montant_total,
fcustomers$age,
data.frame(fcustomers$categ_0,
fcustomers$categ_1,
fcustomers$categ_2),
method = c("pearson"))
pcor.test(fcustomers$montant_total,
fcustomers$age,
data.frame(fcustomers$categ_0,
fcustomers$categ_1,
fcustomers$categ_2),
method = c("pearson"))
pcor.test(fcustomers$montant_total,
fcustomers$age,
data.frame(fcustomers$categ_0),
method = c("pearson"))
a<-data.frame(fcustomers$categ_0,
fcustomers$categ_1,
fcustomers$categ_2)
View(a)
pcor.test(fcustomers$montant_total,
fcustomers$age,
a[,c("fcustomers.categ_0",
"fcustomers.categ_0",
"fcustomers.categ_0")],
method = c("pearson"))
pcor.test(fcustomers$montant_total,
fcustomers$age,
a[,c("fcustomers.categ_0",
"fcustomers.categ_1",
"fcustomers.categ_2")],
method = c("pearson"))
View(a)
pcor.test(fcustomers$montant_total,
fcustomers$age,
a[,c("fcustomers.categ_0",
"fcustomers.categ_1")],
method = c("pearson"))
pcor.test(fcustomers$montant_total,
fcustomers$age,
a[,c("fcustomers.categ_0",
"fcustomers.categ_2")],
method = c("pearson"))
pcor.test(fcustomers$montant_total,
fcustomers$age,
a[,c("fcustomers.categ_1",
"fcustomers.categ_2")],
method = c("pearson"))
pcor.test(fcustomers$montant_total,
fcustomers$age,
a[,c("fcustomers.categ_1",
"fcustomers.categ_0")],
method = c("pearson"))
pcor.test(fcustomers$montant_total,
fcustomers$age,
a[,c("fcustomers.categ_2",
"fcustomers.categ_0")],
method = c("pearson"))
pcor.test(fcustomers$montant_total,
fcustomers$age,
a[,c("fcustomers.categ_2",
"fcustomers.categ_0","age")],
method = c("pearson"))
a<-data.frame(fcustomers$categ_0,
fcustomers$categ_1,
fcustomers$categ_2,fcustomers$age)
pcor.test(fcustomers$montant_total,
fcustomers$age,
a[,c("fcustomers.categ_2",
"fcustomers.categ_0","age")],
method = c("pearson"))
pcor.test(fcustomers$montant_total,
fcustomers$age,
a[,c("fcustomers.categ_2",
"fcustomers.categ_0")],
method = c("pearson"))
pcor.test(fcustomers$montant_total,
fcustomers$age,
a[,c("fcustomers.categ_2",
"fcustomers.categ_0","fcustomers.age")],
method = c("pearson"))
pcor.test(fcustomers$montant_total,
fcustomers$age,
a[,c("fcustomers.categ_2",
"fcustomers.categ_0")],
method = c("pearson"))
pcor.test(fcustomers$montant_total,
fcustomers$age,
a[,c("fcustomers.categ_2",
"fcustomers.categ_0","fcustomers.age")],
method = c("pearson"))
pcor.test(fcustomers$montant_total,
fcustomers$age,
a[,c("fcustomers.categ_2","fcustomers.age")],
method = c("pearson"))
pcor.test(fcustomers$montant_total,
fcustomers$age,
a[,c("fcustomers.categ_0","fcustomers.age")],
method = c("pearson"))
View(a)
pcor.test(fcustomers$montant_total,
fcustomers$age,
a[,c("fcustomers.categ_0",
"fcustomers.categ_1")],
method = c("pearson"))
pcor.test(fcustomers$montant_total,
fcustomers$age,
a[,c(1,2)],
method = c("pearson"))
a<-data.frame(fcustomers$categ_0,
fcustomers$categ_1,
fcustomers$categ_2,fcustomers$frequence)
pcor.test(fcustomers$montant_total,
fcustomers$age,
a[,c(1,2,3)],
method = c("pearson"))
pcor.test(fcustomers$montant_total,
fcustomers$age,
a[,c(1,3)],
method = c("pearson"))
pcor.test(fcustomers$montant_total,
fcustomers$age,
a[,c(3)],
method = c("pearson"))
pcor.test(fcustomers$montant_total,
fcustomers$age,
a[,c(1,2,4)],
method = c("pearson"))
pcor.test(fcustomers$montant_total,
fcustomers$age,
a[,c(4)],
method = c("pearson"))
pcor.test(fcustomers$montant_total,
fcustomers$age,
method = c("pearson"))
pcor.test(fcustomers$montant_total,
fcustomers$age,
a[,c(4)],
method = c("pearson"))
pcor.test(fcustomers$montant_total,
fcustomers$age,
a[,c(1,4)],
method = c("pearson"))
pcor.test(fcustomers$montant_total,
fcustomers$age,
a[,c(1,2,4)],
method = c("pearson"))
pcor.test(fcustomers$montant_total,
fcustomers$age,
a[,c(2,4)],
method = c("pearson"))
pcor.test(fcustomers$montant_total,
fcustomers$age,
a[,c(3,4)],
method = c("pearson"))
pcor.test(fcustomers$montant_total,
fcustomers$age,
a[,c(2,3,4)],
method = c("pearson"))
pcor.test(fcustomers$montant_total,
fcustomers$age,
a[,c(2,3)],
method = c("pearson"))
pcor.test(fcustomers$panier_moyen,
fcustomers$age,
a[,c(2,3)],
method = c("pearson"))
pcor.test(fcustomers$frequence,
fcustomers$age,
a[,c(2,3)],
method = c("pearson"))
pcor.test(fcustomers$panier_moyen,
fcustomers$age,
a[,c(0)],
method = c("pearson"))
pcor.test(fcustomers$panier_moyen,
fcustomers$age,
a[,c(1)],
method = c("pearson"))
pcor.test(fcustomers$panier_moyen,
fcustomers$age,
a[,c(0)],
method = c("pearson"))
pcor.test(fcustomers$frequence,
fcustomers$age,
a[,c(5)],
method = c("pearson"))
a<-data.frame(fcustomers$categ_0,
fcustomers$categ_1,
fcustomers$categ_2,fcustomers$frequence,
fcustomers$montant_total)
pcor.test(fcustomers$frequence,
fcustomers$age,
a[,c(5)],
method = c("pearson"))
View(transactions)
###je réalise la matrice des corrélation pour ces 3 variables par
###raport à l'âge du client
fcustomers<-filter(customers,
!(client_id %in% big_customers),
date < "2021-10-02")
###je réalise la matrice des corrélation pour ces 3 variables par
###raport à l'âge du client
fcustomers<-filter(customers,
!(client_id %in% big_customers),
date < as.Date("2021-10-02"))
###je réalise la matrice des corrélation pour ces 3 variables par
###raport à l'âge du client
fcustomers<-filter(customers,
!(client_id %in% big_customers),
date < as.Date("2021-10-02"))
###je réalise la matrice des corrélation pour ces 3 variables par
###raport à l'âge du client
fcustomers<-filter(customers,
!(client_id %in% big_customers),
as.Date(date) < as.Date("2021-10-02"))
fcustomers<-select(filter(transactions, date< as.Date("2021-10-02"),
fcustomers<-select(
filter(transactions, date< as.Date("2021-10-02")),
age, client_id,session_id)%>%
distinct()%>%
group_by(client_id, age)%>%count()%>%ungroup()%>%
mutate(frequence = n/12)%>%
full_join(distinct(select(
transactions, client_id, birth, categ_age, sex)),by = "client_id")
fcustomers<-select(
filter(transactions, date< as.Date("2021-10-02")),
age, client_id,session_id)%>%
distinct()%>%
group_by(client_id, age)%>%count()%>%ungroup()%>%
mutate(frequence = n/12)%>%
full_join(distinct(select(
transactions, client_id, birth, categ_age, sex)),by = "client_id")
filter(transactions, date< as.Date("2021-10-02"))
x<-filter(transactions, date< as.Date("2021-10-02"))
View(x)
fcustomers<-filter(transactions, date< as.Date("2021-10-02"))%>%
select(age, client_id,session_id)%>%
distinct()%>%
group_by(client_id, age)%>%count()%>%ungroup()%>%
mutate(frequence = n/12)%>%
full_join(distinct(select(
transactions, client_id, birth, categ_age, sex)),by = "client_id")
View(x)
View(x)
fcustomers<-
select(age, client_id,session_id)%>%
distinct()%>%
group_by(client_id, age)%>%count()%>%ungroup()%>%
mutate(frequence = n/12)%>%
full_join(distinct(select(
transactions, client_id, birth, categ_age, sex)),by = "client_id")
###Je reconstruit ma table customers en supprimant les client inactifs
###et j'ajoute le nombre de livre acheté et la frequence d'achat par mois
###ainsi que l'âge.
###j'ai perdu 21 colonnes donc juste les client inactif
customers<-select(transactions, age, client_id,session_id)%>%
distinct()%>%
group_by(client_id, age)%>%count()%>%ungroup()%>%
mutate(frequence = n/12)%>%
full_join(distinct(select(
transactions, client_id, birth, categ_age, sex)),by = "client_id")
library(dplyr)
library(DT)
library(reshape)
library(splitstackshape)
library(ggplot2)
library(scales)
library(ineq)
library(zoo)
library(cluster)
library(corrplot)
library(Hmisc)
library("ggpubr")
library(rstatix)
library(BioStatR)
library(reshape)
library(questionr)
library("FactoMineR")
library("factoextra")
library("gplots")
library(tidyr)
library(dplyr)
library(DT)
library(reshape)
library(splitstackshape)
library(ggplot2)
library(scales)
library(ineq)
library(zoo)
library(cluster)
library(corrplot)
library(Hmisc)
library("ggpubr")
library(rstatix)
library(BioStatR)
library(reshape)
library(questionr)
library("FactoMineR")
library("factoextra")
library("gplots")
library(tidyr)
library(dplyr)
library(DT)
library(reshape)
library(splitstackshape)
library(ggplot2)
library(scales)
library(ineq)
library(zoo)
library(cluster)
library(corrplot)
library(Hmisc)
library("ggpubr")
library(rstatix)
library(BioStatR)
library(reshape)
library(questionr)
library("FactoMineR")
library("factoextra")
library("gplots")
library(tidyr)
setwd("C:/Users/Bruno/Desktop/ouvrablesFormations/P4_pinos_bruno")
library(dplyr)
library(DT)
library(reshape)
library(splitstackshape)
library(ggplot2)
library(scales)
library(ineq)
library(zoo)
library(cluster)
library(corrplot)
library(Hmisc)
library("ggpubr")
library(rstatix)
library(BioStatR)
library(reshape)
library(questionr)
library("FactoMineR")
library("factoextra")
library("gplots")
library(tidyr)
###Je filtre les produits tests de la table produit
products<-read.csv("products.csv", encoding = "UTF-8")%>%
filter(id_prod != "T_0")
###Je filtre les clients tests de la table customers
customers<-read.csv("customers.csv", encoding = "UTF-8")%>%
filter(!(client_id %in% c("ct_1","ct_0")))
###Je filtre les produits tests de la table transactions
transactions<-read.csv("transactions.csv", encoding = "UTF-8")%>%
filter(id_prod != "T_0")
###Je transforme la colonne categ de la table produit en facteur
products$categ<-factor(products$categ)
###Je vérifie qu'il n'y ait pas de valeurs non renseignées
sapply(products,function(x) sum(is.na(x)))
sapply(customers,function(x) sum(is.na(x)))
sapply(transactions,function(x) sum(is.na(x)))
###Cette fonction permet de savoir si une colonne ou un ensemble
###de colonne est une primaire ou non d'une certaine table
###La fonction prend en argument:
###-la table en question (df)
###-la, les colonnes, ou l'ensemble de colonne que l'on veut tester
check_possible_primary_key<-
function(df, ...){
###On sélectionne les colonne que l'on veut tester
x<-select(df, ...)
###Si le nombre de ligne après avoir supprimé les doublons est le
###même que celui de la table de base on retourne oui sinon non
if (nrow(df) == nrow(df[!duplicated(x),])){
return(TRUE)
}else return(FALSE)
}
###Je vérifie si les clés candidates de mes tables sont primaires
check_possible_primary_key(customers, client_id)
View(transactions)
###Je vérifie si les clés candidates de mes tables sont primaires
check_possible_primary_key(customers, client_id)
check_possible_primary_key(products, id_prod)
check_possible_primary_key(transactions, date)
###je joins à gauche la table produit puis la table customers à ma
###table transaction.
###Je joins à gauche car je ne veux pas avoir les clients
###et les produits qui ne sont pas dans la table transaction
transactions<-transactions%>%left_join(products)%>%
left_join(customers)%>%
###J'ajoute la colonne âge à ma table :
###année actuelle moins date de naissance
mutate(age = 2022 - birth)
###Je vérifie si j'ai des valeurs non renseignées
sapply(transactions,function(x) sum(is.na(x)))
###Je récupère les "na" dans une table
na_table<-filter(transactions, is.na(price) | is.na(categ))
###L'id_produit commence par 0 donc je met le livre dans la categ 0
na_table$categ<-0
###Je remplace les prix manquants par la médiane des prix des
###livres de cette catégorie
na_table$price<-median(filter(transactions, categ == 0)$price)
###Je supprime les "na" de la table de base puis je lui colle la table
###extraite modifiée
transactions<-na.omit(transactions)%>%rbind(na_table)
###J'ajoute le produit manquant à la table produit
products<-rbind(products, filter(
distinct(select(na_table, id_prod, price, categ))))
