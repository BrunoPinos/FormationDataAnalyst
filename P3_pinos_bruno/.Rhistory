cat(cereal2013_aa*100/cereal2013_n_aa,"% des céréales destinées à",
"l'alimentation est réservé aux animaux")
###On veut sélectionner les 15 produits les plus exportés
###par les pays possédant des personnes en sous-nutrition
prdt_sa2013<-
###On filtre les pays dans lesquels la FAO recense des
###personnes en sous-nutrition en 2013
filter(sousali, Symbole == "F", Code.année == 20122014)%>%
select(Zone)%>%
###On joint avec les exportations en 2013
inner_join(filter(produit2013, Code.Élément == 5911))%>%
###On somme par produit
group_by(Produit)%>%
summarise(Valeur = sum(Valeur))%>%
###On range du produit le plus exporté au moins exporté
arrange(desc(Valeur))%>%
###On conserve les 15 premiers
slice(1:15)%>%
###On ne garde que la colonnes produit
select(Produit)
###La liste des 15 produits les plus exportés par les pays possédant
###des personnes en sous-nutrition en 2013 (prdt_sa2013)
datatable(prdt_sa2013)
###Somme des 200 importations les plus importantes de la liste des
###15 produits ci-dessus par produit
importation_prdt_sa2013<-
###On filtre les importations en 2013
filter(produit2013, Code.Élément == 5611)%>%
###On joint avec les 15 produit ci-dessus
inner_join(prdt_sa2013)%>%
###On range de la plus grande à la moins grande
arrange(desc(Valeur))%>%
###On ne garde que les 200 plus grandes importations
slice(1:200)%>%
###On somme par produit
group_by(Produit, Unité)%>%
summarise(Valeur = sum(Valeur))%>%
###On range dans l'ordre décroissant
arrange(desc(Valeur))
datatable(importation_prdt_sa2013)
###On calcul le poids des autres utilisations des produits de la liste
autre_prdt_sa2013<-
###On filtre les autres utilisations
filter(produit2013, Code.Élément == 5154)%>%
###On joint à la liste
inner_join(prdt_sa2013)%>%
###On somme par produit
group_by(Produit)%>%
summarise(Valeur = sum(Valeur))
###On calcul la disponibilité intérieur des 15 produits de la liste
di_prdt_sa2013<-
###On filtre la disponibilité intérieur
filter(produit2013, Code.Élément == 5301)%>%
###On joint à la liste
inner_join(prdt_sa2013)%>%
###On somme par produit
group_by(Produit)%>%
summarise(Valeur = sum(Valeur))
###On calcul le ratio (autre utilisation/disponibilité intérieur)
###Unité : 1000t/1000t = 1
###On a bien un ratio
ratio_autre_di_prdt_sa2013<-
###On joint les deux tables ci-dessus
inner_join(autre_prdt_sa2013, di_prdt_sa2013, by = "Produit")%>%
###On divise les colonnes Valeur ligne par ligne
transmute(Produit = Produit,
Valeur = Valeur.x/Valeur.y)%>%
arrange(desc(Valeur))
###On calcul le poids des produits aliments pour animaux de la liste
aa_prdt_sa2013<-
filter(produit2013, Code.Élément == 5521)%>%
inner_join(prdt_sa2013)%>%
group_by(Produit)%>%
summarise(Valeur = sum(Valeur))
###On calcul le poids des produits pour la consomation
###humaine (nourriture) de la liste
n_prdt_sa2013<-
filter(produit2013, Code.Élément == 5142)%>%
inner_join(prdt_sa2013)%>%
group_by(Produit)%>%
summarise(Valeur = sum(Valeur))
###On calcul le ratio:
###aliment pour animaux/(aliment pour animaux + nourriture)
###Unité: 1000t/1000t = 1
###On a bien un ratio
ratio_aa_naa<-
inner_join(aa_prdt_sa2013, n_prdt_sa2013, by = "Produit")%>%
transmute(Produit = Produit,
Valeur = Valeur.x/(Valeur.y+Valeur.x))%>%
arrange(desc(Valeur))
cat("Les 3 produits qui ont la plus grande valeur pour le ratio ",
"entre la quantité \ndestinés aux autres utilisations",
"et la disponibilité intérieure sont:",
###On extrait les trois plus gros ratio (autre/di)
ratio_autre_di_prdt_sa2013$Produit%>%as.vector()%>%.[1],",",
ratio_autre_di_prdt_sa2013$Produit%>%as.vector()%>%.[2],",",
ratio_autre_di_prdt_sa2013$Produit%>%as.vector()%>%.[3])
cat("Les 3 produits qui ont la plus grande valeur pour le ratio ",
"entre la quantité \ndestinés à la nourriture animale et la",
"quantité destinée à la nourriture \n(animale + humaine) sont:",
###On extrait les trois plus gros ratio (aa/(aa+na))
ratio_aa_naa$Produit%>%as.vector()%>%.[1],",",
ratio_aa_naa$Produit%>%as.vector()%>%.[2],",",
ratio_aa_naa$Produit%>%as.vector()%>%.[3])
t_libere<-
filter(produit2013, Code.Élément == 5521,
is_cereal == TRUE, Code.zone == 231)%>%
select(Valeur)%>%
sum()*1000/10
cat(t_libere,"est Le nombre de tonnes de céréales qui pourraient",
"être libérées si les USA diminuaient leur \nproduction de produits",
"animaux de 10%")
###On calcul la proportion de manioc exporté en thaïland
###On récupère la quantité de manioc exporté
manioc_exporte<-
(filter(produit2013, Code.zone == 216,
Code.Élément == 5911,
###On multiplie par 100 pour avoir un pourcentage
Code.Produit == 2532)$Valeur)*100/
###On la divise par quantité de manioc produit
(filter(produit2013, Code.zone == 216,
Code.Élément == 5511,
Code.Produit == 2532)$Valeur)
cat(manioc_exporte,"% du manioc produit en Thaïland est exportée")
sa_thailand<-
###On récupère le nombre de personne en sous nutrition en Thaïland
###en 2013
(filter(sousali, Code.zone == 216,
Code.année == 20122014)%>%
.$Valeur%>%
as.vector()%>%
###On multiplie par 1000 pour être en millier de personne
###On multiplie par 100 pour être en pourcentage à la fin
as.numeric()*1000*100)/
###On divise par la population de la Thaïland
(filter(pop2013, Code.zone == 216)$Valeur)
cat(sa_thailand,"% des Thaïlandais sont sous-alimentés")
###On calcul la disponibilité intérieur mondiale par produit
di2017_veg<-
###On filtre la disponibilité intérieur
filter(veg2017, Code.Élément == 5301)%>%
###On somme par produit
group_by(Produit)%>%
summarise(Valeur = sum(Valeur))
### On calcul la somme totale de calorie végétale du monde pour un an
### On multiplie le poid de chaque produit par leur ratio(énergie/poid)
### puis on fait la somme de tous les produits.
### Unité : (1000tonnes/an)*(kcal/kg) = 10^6kcal/an
### On multiplie le résultat par 10^6 et on est en kcal/an
somme_di2017_veg_e<-
inner_join(di2017_veg, moyenne_ratio_e_pds, by = "Produit")%>%
transmute(Valeur = Valeur.x*Valeur.y*10^6)%>%
.$Valeur%>%
sum()
cat("la disponibilité intérieure mondiale exprimée en kcal uniquement",
"pour les produits végétaux est de",somme_di2017_veg_e,"kcal")
### On calcul la somme totale de calorie végétale du monde pour un an
### On multiplie le poid de chaque produit par leur ratio(énergie/poid)
### puis on fait la somme de tous les produits.
### Unité : (1000tonnes/an)*(kcal/kg) = 10^6kcal/an
### On multiplie le résultat par 10^6 et on est en kcal/an
somme_di2017_veg_e<-
inner_join(di2017_veg, moyenne_ratio_e_pds, by = "Produit")%>%
transmute(Valeur = Valeur.x*Valeur.y*10^6)%>%
.$Valeur%>%
sum()
cat("si toute la disponibilité intérieure mondiale de produits",
"végétaux était utilisée \npour de la nourriture en 2017",
"cela représenterai",somme_di2017_veg_e,"kcal")
### On calcul la somme totale de protéine végétale du monde pour un an
### On multiplie le poid de chaque produit par leur pourcentage de
### protéine puis on fait la somme de tous les produits.
### Unité : (1000tonnes/an)*(1/100) = 10^4kg/an
### On multiplie le résultat par 10^4 et on est en kg
somme_di2017_veg_p<-
inner_join(di2017_veg, moyenne_ratio_p_pds, by = "Produit")%>%
transmute(Valeur = Valeur.x*Valeur.y*10^4)%>%
.$Valeur%>%
sum()
cat("si toute la disponibilité intérieure mondiale de produits",
"végétaux était utilisée \npour de la nourriture en 2017",
"cela représenterai",somme_di2017_veg_p,"kg de protéine")
### Un humain à besoin de 2300 kcal par jour pour survivre (FAO)
cal_min_per_jour<-2300
### Un humain à besoin de 0.05 kg de protéine par jour pour survivre
proteine_min_per_jour<-0.05
### On calcule le pourcentage de population mondiale que l'on peut
### nourir en terme de calorie avec seulement les produits végétaux
### Unité : (kcal/ans)/(personnes*(kcal/jour/personne)) = 1/365
### On multiplie par 365 puis par 100 et on est en pourcentage
humain1_nourrit_e<-
(somme_di2017_veg_e/(365*pop2017_t*cal_min_per_jour))*100
cat("si toute la disponibilité intérieure mondiale de produits",
"végétaux était utilisée \npour de la nourriture on pourrait",
"nourir",humain1_nourrit_e,"% de la population mondiale",
"\nen terme de calories")
### On calcule le pourcentage de population mondiale que l'on peut
### nourir en terme de protéine avec seulement les produits végétaux
### Unité : (kg/ans)/(personnes*(kg/jour/personne)) = 1/365
### On multiplie par 365 puis par 100 et on est en pourcentage
humain1_nourrit_p<-
(somme_di2017_veg_p/
(365*pop2017_t*proteine_min_per_jour))*100
cat("si toute la disponibilité intérieure mondiale de produits",
"végétaux était utilisée \npour de la nourriture on pourrait",
"nourir",humain1_nourrit_p,"% de la population mondiale",
"\nen terme de protéines")
n_pe_aa_veg2017_e<-
###On ne garde que nourriture, perte et aliment pour animaux en 2017
###(en filtrant par les codes élément 5142, 5123 et 5521)
filter(veg2017, Code.Élément %in% c(5142, 5123, 5521))%>%
###On somme par produit et zone
group_by(Produit, Zone)%>%
summarise(Valeur = sum(Valeur))%>%
###On multiplie chaque produit de chaque pays par son ratio
###Unité = 1000t*kcal/kg = 10^6kcal
###On multiplie par 10^6 pour être en kcal
table_faop(ratio_e_pds, ., "Produit","Zone", coefficient = 10^6)%>%
###On somme tous les kcal de chaques produits de chaques pays
select(Valeur)%>%
sum()
cat("En 2017 si toute la disponibilité alimentaire en produits",
"végétaux la nourriture végétale \ndestinée aux animaux et les",
"pertes de produits végétaux étaient utilisés pour de la",
"nourriture \ncela représenterai",n_pe_aa_veg2017_e,
"kcal de nourriture")
n_pe_aa_veg2017_p<-
filter(veg2017, Code.Élément %in% c(5142, 5123, 5521))%>%
filter(Symbole != "A")%>%
group_by(Produit, Zone)%>%
summarise(Valeur = sum(Valeur))%>%
###Unité = 1000t*1/100 = 10t =10000kg
###On multiplie par 10000 pour être en kg
table_faop(ratio_p_pds, ., "Produit","Zone", coefficient = 10^4)%>%
select(Valeur)%>%
sum()
cat("En 2017 si toute la disponibilité alimentaire en produits",
"végétaux la nourriture végétale \ndestinée aux animaux et les",
"pertes de produits végétaux étaient utilisés pour de la",
"nourriture \ncela représenterai",n_pe_aa_veg2017_p,
"kg de protéine")
humain2_nourrit_e<-
###On divise le totale de kcal des produits végétaux
###(nourriture, aliment pour animaux et perte)
###par le besoin mondiale en kcal pour un an
###On multiplie par cent pour obtenir un pourcentage
(n_pe_aa_veg2017_e/(365*pop2017_t*cal_min_per_jour))*100
cat("En 2017 si toute la disponibilité alimentaire en produits",
"végétaux la nourriture végétale \ndestinée aux animaux et les",
"pertes de produits végétaux étaient utilisés pour de la",
"nourriture \non pourrait nourrir",humain2_nourrit_e,
"% de la population mondiale en terme de calories")
humain2_nourrit_p<-
###On divise le totale de g de protéine des produits végétaux
###(nourriture, aliment pour animaux et perte)
###par le besoin mondiale en protéine pour un an
###On multiplie par cent pour obtenir un pourcentage
(n_pe_aa_veg2017_p/(365*pop2017_t*proteine_min_per_jour))*100
cat("En 2017 si toute la disponibilité alimentaire en produits",
"végétaux la nourriture végétale \ndestinée aux animaux et les",
"pertes de produits végétaux étaient utilisés pour de la",
"nourriture \non pourrait nourrir",humain2_nourrit_p,
"% de la population mondiale en terme de protéine")
###On calcul la somme des disponibilitées alimentaire de chaque
###pays en kcal
somme_da2017_e<-
###On ne garde que la nourriture en 207
###(en filtrant par le codes élément 5142)
filter(produit2017, Code.Élément == 5142)%>%
###On somme par produit et zone
group_by(Produit, Zone)%>%
summarise(Valeur = sum(Valeur))%>%
###On multiplie chaque produit de chaque pays par son ratio
###Unité = 1000t*kcal/kg = 10^6kcal
###On multiplie par 10^6 pour être en kcal
table_faop(ratio_e_pds, ., "Produit","Zone", coefficient = 10^6)%>%
###On somme tous les kcal de chaques produits de chaques pays
select(Valeur)%>%
sum()
cat("En 2017 la disponibilité alimentaire mondiale en terme de",
"\ncalories est de",somme_da2017_e,"kcal")
somme_da2017_p<-
filter(produit2017, Code.Élément == 5142)%>%
group_by(Produit, Zone)%>%
summarise(Valeur = sum(Valeur))%>%
###Unité = 1000t*1/100 = 10t =10000kg
###On multiplie par 10000 pour être en kg
table_faop(ratio_p_pds, ., "Produit","Zone", coefficient = 10^4)%>%
select(Valeur)%>%
sum()
cat("En 2017 la disponibilité alimentaire mondiale en terme de",
"\nprotéine est de",somme_da2017_e,"kg")
humain3_nourrit_e<-
(somme_da2017_e/(365*pop2017_t*cal_min_per_jour))*100
cat(humain3_nourrit_e,"% de la population mondiale pourraient être",
"nourris avec la \ndisponibilité alimentaire mondiale en",
"terme de calories en 2017")
humain3_nourrit_p<-
(somme_da2017_p/(365*pop2017_t*proteine_min_per_jour))*100
cat(humain3_nourrit_p,"% de la population mondiale pourraient être",
"nourris avec la \ndisponibilité alimentaire mondiale en",
"terme de protéines en 2017")
nbre_sa2017 <-
###On filtre les personne sous alimenté par pays en 2017
###(On filtre les pays dont on ne connait
### pas les chiffre et les pays qui compte moins de
### 100000 personnes sous alimenté)
filter(sousali, Symbole == "F",
Valeur != "<0.1",
Code.année == 20162018)%>%
###On sélectionne la colonne "Valeur"
select(Valeur)%>%
###On la transforme en vecteur numerique pour
###pouvoir sommer ses éléments
unlist()%>%
as.vector()%>%
as.numeric()%>%
###On somme toutes les valeurs pour obtenir le totale de personne
### sous alimenté
sum()*10^6
cat((nbre_sa2017/pop2017_t)*100,
"% de la population mondiale est considérée",
"comme étant en sous-nutrition en 2017 d'après la FAO")
###On ajoute une colonne is_cereal à la table produit2017
produit2017<-iscereal(produit2017)
###On affiche les différents produit de type céréale
filter(produit2017, is_cereal == TRUE)%>%
group_by(Code.Produit, Produit)%>%
summarise()%>%
datatable()
###On calcul le poid totale des céréales pour la consomation
###humaine et animale
cereal2017_n_aa <-
###On filtre les éléments nourriture et aliment
###pour animaux et on filtre les produits de type céréale
filter(produit2017, Code.Élément %in% c(5142, 5521),
is_cereal == TRUE)%>%
###On somme le tout
select(Valeur)%>%
sum()
###On calcul le poids des céréales pour animaux
cereal2017_aa <-
filter(produit2017, Code.Élément == 5521,
is_cereal == TRUE)%>%
select(Valeur)%>%
sum()
###On fait le quotient aa/(n + aa) et on affiche la réponse
###On multiplie par cent pour être en pourcentage
cat(cereal2017_aa*100/cereal2017_n_aa,"% des céréales destinées à",
"l'alimentation est réservé aux animaux")
###On veut sélectionner les 15 produits les plus exportés
###par les pays possédant des personnes en sous-nutrition
prdt_sa2017<-
###On filtre les pays dans lesquels la FAO recense des
###personnes en sous-nutrition en 2017
filter(sousali, Symbole == "F", Code.année == 20162018)%>%
select(Zone)%>%
###On joint avec les exportations en 2017
inner_join(filter(produit2017, Code.Élément == 5911))%>%
###On somme par produit
group_by(Produit)%>%
summarise(Valeur = sum(Valeur))%>%
###On range du produit le plus exporté au moins exporté
arrange(desc(Valeur))%>%
###On conserve les 15 premiers
slice(1:15)%>%
###On ne garde que la colonnes produit
select(Produit)
###La liste des 15 produits les plus exportés par les pays possédant
###des personnes en sous-nutrition en 2017 (prdt_sa2017)
datatable(prdt_sa2017)
###Somme des 200 importations les plus importantes de la liste des
###15 produits ci-dessus par produit
importation_prdt_sa2017<-
###On filtre les importations en 2017
filter(produit2017, Code.Élément == 5611)%>%
###On joint avec les 15 produit ci-dessus
inner_join(prdt_sa2017)%>%
###On range de la plus grande à la moins grande
arrange(desc(Valeur))%>%
###On ne garde que les 200 plus grandes importations
slice(1:200)%>%
###On somme par produit
group_by(Produit, Unité)%>%
summarise(Valeur = sum(Valeur))%>%
###On range dans l'ordre décroissant
arrange(desc(Valeur))
datatable(importation_prdt_sa2017)
###On calcul le poids des autres utilisations des produits de la liste
autre_prdt_sa2017<-
###On filtre les autres utilisations
filter(produit2017, Code.Élément == 5154)%>%
###On joint à la liste
inner_join(prdt_sa2017)%>%
###On somme par produit
group_by(Produit)%>%
summarise(Valeur = sum(Valeur))
###On calcul la disponibilité intérieur des 15 produits de la liste
di_prdt_sa2017<-
###On filtre la disponibilité intérieur
filter(produit2017, Code.Élément == 5301)%>%
###On joint à la liste
inner_join(prdt_sa2017)%>%
###On somme par produit
group_by(Produit)%>%
summarise(Valeur = sum(Valeur))
###On calcul le ratio (autre utilisation/disponibilité intérieur)
###Unité : 1000t/1000t = 1
###On a bien un ratio
ratio_autre_di_prdt_sa2017<-
###On joint les deux tables ci-dessus
inner_join(autre_prdt_sa2017, di_prdt_sa2017, by = "Produit")%>%
###On divise les colonnes Valeur ligne par ligne
transmute(Produit = Produit,
Valeur = Valeur.x/Valeur.y)%>%
arrange(desc(Valeur))
###On calcul le poids des produits aliments pour animaux de la liste
aa_prdt_sa2017<-
filter(produit2017, Code.Élément == 5521)%>%
inner_join(prdt_sa2017)%>%
group_by(Produit)%>%
summarise(Valeur = sum(Valeur))
###On calcul le poids des produits pour la consomation
###humaine (nourriture) de la liste
n_prdt_sa2017<-
filter(produit2017, Code.Élément == 5142)%>%
inner_join(prdt_sa2017)%>%
group_by(Produit)%>%
summarise(Valeur = sum(Valeur))
###On calcul le ratio:
###aliment pour animaux/(aliment pour animaux + nourriture)
###Unité: 1000t/1000t = 1
###On a bien un ratio
ratio_aa_naa<-
inner_join(aa_prdt_sa2017, n_prdt_sa2017, by = "Produit")%>%
transmute(Produit = Produit,
Valeur = Valeur.x/(Valeur.y+Valeur.x))%>%
arrange(desc(Valeur))
cat("Les 3 produits qui ont la plus grande valeur pour le ratio ",
"entre la quantité \ndestinés aux autres utilisations",
"et la disponibilité intérieure sont:",
###On extrait les trois plus gros ratio (autre/di)
ratio_autre_di_prdt_sa2017$Produit%>%as.vector()%>%.[1],",",
ratio_autre_di_prdt_sa2017$Produit%>%as.vector()%>%.[2],",",
ratio_autre_di_prdt_sa2017$Produit%>%as.vector()%>%.[3])
cat("Les 3 produits qui ont la plus grande valeur pour le ratio ",
"entre la quantité \ndestinés à la nourriture animale et la",
"quantité destinée à la nourriture \n(animale + humaine) sont:",
###On extrait les trois plus gros ratio (aa/(aa+na))
ratio_aa_naa$Produit%>%as.vector()%>%.[1],",",
ratio_aa_naa$Produit%>%as.vector()%>%.[2],",",
ratio_aa_naa$Produit%>%as.vector()%>%.[3])
t_libere<-
filter(produit2017, Code.Élément == 5521,
is_cereal == TRUE, Code.zone == 231)%>%
select(Valeur)%>%
sum()*1000/10
cat(t_libere,"est Le nombre de tonnes de céréales qui pourraient",
"être libérées si les USA diminuaient leur \nproduction de produits",
"animaux de 10%")
###On calcul la proportion de manioc exporté en thaïland
###On récupère la quantité de manioc exporté
manioc_exporte<-
(filter(produit2017, Code.zone == 216,
Code.Élément == 5911,
###On multiplie par 100 pour avoir un pourcentage
Code.Produit == 2532)$Valeur)*100/
###On la divise par quantité de manioc produit
(filter(produit2017, Code.zone == 216,
Code.Élément == 5511,
Code.Produit == 2532)$Valeur)
cat(manioc_exporte,"% du manioc produit en Thaïland est exportée")
sa_thailand<-
###On récupère le nombre de personne en sous nutrition en Thaïland
###en 2017
(filter(sousali, Code.zone == 216,
Code.année == 20162018)%>%
.$Valeur%>%
as.vector()%>%
###On multiplie par 1000 pour être en millier de personne
###On multiplie par 100 pour être en pourcentage à la fin
as.numeric()*1000*100)/
###On divise par la population de la Thaïland
(filter(pop2017, Code.zone == 216)$Valeur)
cat(sa_thailand,"% des Thaïlandais sont sous-alimentés")
View(ratio_e_pds)
View(moyenne_ratio_e_pds)
View(di2017_veg)
View(moyenne_ratio_e_pds)
### On multiplie le poid de chaque produit par leur ratio(énergie/poid)
### puis on fait la somme de tous les produits.
### Unité : (1000tonnes/an)*(kcal/kg) = 10^6kcal/an
### On multiplie le résultat par 10^6 et on est en kcal/an
somme_di2017_veg_e<-
inner_join(di2017_veg, moyenne_ratio_e_pds, by = "Produit")
View(somme_di2017_veg_e)
### On multiplie le poid de chaque produit par leur ratio(énergie/poid)
### puis on fait la somme de tous les produits.
### Unité : (1000tonnes/an)*(kcal/kg) = 10^6kcal/an
### On multiplie le résultat par 10^6 et on est en kcal/an
somme_di2017_veg_e<-
inner_join(di2017_veg, moyenne_ratio_e_pds, by = "Produit")%>%
transmute(Valeur = Valeur.x*Valeur.y*10^6)%>%
.$Valeur%>%
sum()
###On charge toutes les tables de la FAO que l'on a récupéré:
###-On charge le tableau des population par pays en 2013
pop2013<-read.csv("pop2013.csv", encoding = "UTF-8")
View(pop2013)
###On enlève les agrégats, ce qui empêche des populations
###d'être compté deux fois
pop2013<-filter(pop2013, Symbole != "A")
