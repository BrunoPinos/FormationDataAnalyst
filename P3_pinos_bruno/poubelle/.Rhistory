sum()
somme_npna2013_p
humain2_nourrit_e<-
(somme_npna2013_e/(365*pop2013_totale*cal_min_per_jour))*100
humain2_nourrit_e
humain2_nourrit_p<-
(somme_npna2013_p/(365*pop2013_totale*proteine_min_per_jour))*100
humain2_nourrit_p
somme_da2013_e<-sum(da2013_e_totale$Valeur)*10^6*365
somme_da2013_e
somme_da2013_p<-sum(da2013_p_totale$Valeur)*1000*365
somme_da2013_p
humain3_nourrit_e<-
(somme_da2013_e/(365*pop2013_totale*cal_min_per_jour))*100
humain3_nourrit_e
humain3_nourrit_p<-
(somme_da2013_p/(365*pop2013_totale*proteine_min_per_jour))*100
humain3_nourrit_p
nbre_sous_alimenté <- 800.1*10^6
nbre_sous_alimenté_prct <-
nbre_sous_alimenté/pop2013_totale
nbre_sous_alimenté_prct <-
(nbre_sous_alimenté/pop2013_totale)*100
View(nourriture2013)
View(moyenne_ratio_e_pds)
nourriture2013%>%
group_by(Zone)%>%
View()
nourriture2013%>%
group_by(Produit)%>%
View()
nourriture2013%>%
group_by(Produit)%>%
View()
nourriture2013%>%
group_by(Produit)%>%
View(summarise())
nourriture2013%>%
group_by(Produit)%>%
summarise()%>%
View()
nourriture2013%>%
group_by(Produit, Code.Produit)%>%
summarise()%>%
View()
nourriture2013_cér<-read.csv("nourriture2013_cér.csv")
View(nourriture2013_cér)
nourriture2013_cér<-
read.csv("nourriture2013_cér.csv", encoding = "UTF-8")
View(nourriture2013_cér)
nourriture2013_cer<-
read.csv("nourriture2013_cér.csv", encoding = "UTF-8")
datatable(nourriture2013-cer)
datatable(nourriture2013_cer)
View(nourriture2013_cer)
select(nourriture2013_cer, Produit, Code.Produit)
datatable(nourriture2013_cer)
cereal<-
select(nourriture2013_cer, Produit, Code.Produit)
View(cereal)
View(cbind(nourriture2013, is_cereal))
is_cereal<-boolean
nourriture2013$is_cereal <- "yes"
View(nourriture2013)
class(nourriture2013$is_cereal)
nourriture2013$is_cereal <- TRUE
class(nourriture2013$is_cereal)
View(cereal)
if (nourriture2013$Code.Produit == [2511:2520, 2805]){
nourriture2013$is_cereal <- TRUE
else nourriture2013$is_cereal<- FALSE
}
if (nourriture2013$Code.Produit == [2511:2520, 2805]){
nourriture2013$is_cereal <- TRUE
}
if (nourriture2013$Code.Produit == (2511:2520, 2805){
if (nourriture2013$Code.Produit == (2511:2520, 2805)){
nourriture2013$is_cereal <- TRUE
}
nourriture2013$is_cereal <- TRUE}
if (nourriture2013$Code.Produit == (2511:2520, 2805)){
nourriture2013$is_cereal <- TRUE
}
if (nourriture2013$Code.Produit == (2511:2520, 2805)){
nourriture2013$is_cereal <- TRUE
}
if (nourriture2013$Code.Produit == (2511:2520, 2805)){
nourriture2013$is_cereal <- TRUE
}
if (nourriture2013$Code.Produit == (2511:2520, 2805)){
nourriture2013$is_cereal <- TRUE
}
if (nourriture2013$Code.Produit == (2511:2520, 2805)){
nourriture2013$is_cereal <- TRUE
}
if (nourriture2013$Code.Produit == (2511:2520, 2805)){
nourriture2013$is_cereal <- TRUE
}else nourriture2013$is_cereal<- FALSE
if (nourriture2013$Code.Produit == (2511:2520, 2805))
if (nourriture2013$Code.Produit == (2511:2520 or 2805))
if (nourriture2013$Code.Produit isin(2511:2520, 2805)
if (nourriture2013$Code.Produit isin(2511:2520, 2805)){
nourriture2013$is_cereal <- TRUE
}
if (nourriture2013$Code.Produit isin(2511:2520, 2805)){
nourriture2013$is_cereal <- TRUE
}
isin()
library(prob)
library(FinancialInstrument)
install.packages("prob")
library(prob)
isin()
if (nourriture2013$Code.Produit isin(2511:2520, 2805)){
nourriture2013$is_cereal <- TRUE
}
if (isin(nourriture2013$Code.Produit,c(2511:2520, 2805))){
nourriture2013$is_cereal <- TRUE
}
if (isin(nourriture2013$Code.Produit,c(2511:2520, 2805))){
nourriture2013$is_cereal <- TRUE
}
else nourriture2013$is_cereal<- FALSE
if (isin(nourriture2013$Code.Produit,c(2511:2520, 2805))){
nourriture2013$is_cereal <- TRUE
} else nourriture2013$is_cereal<- FALSE
View(nourriture2013)
nourriture2013<-read.csv("nourriture2013.csv", encoding = "UTF-8")
### On filtre les 0 pour gagner en précision
nourriture2013<-read.csv("nourriture2013.csv", encoding = "UTF-8")%>%
filter(Valeur >=1, Symbole != "A")
nourriture2013<-read.csv("nourriture2013.csv", encoding = "UTF-8")
setwd("C:/Users/Bruno/Desktop/ouvrablesFormations/P3_pinos_bruno")
nourriture2013<-read.csv("nourriture2013.csv", encoding = "UTF-8")
if (isin(nourriture2013$Code.Produit,c(2511:2520, 2805))){
nourriture2013$is_cereal <- TRUE
} else nourriture2013$is_cereal<- FALSE
View(nourriture2013)
if (isin(nourriture2013$Code.Produit,c(2511:2520, 2805))){
nourriture2013$is_cereal <- TRUE
} else nourriture2013$is_cereal<- FALSE
if (isin(nourriture2013$Code.Produit, 2511)){
nourriture2013$is_cereal <- TRUE
} else nourriture2013$is_cereal<- FALSE
if (isin(nourriture2013$Code.Produit, 2512)){
nourriture2013$is_cereal <- TRUE
} else nourriture2013$is_cereal<- FALSE
i +=1
i+=1
i = i + 1
i = 1
if (isin(nourriture2013$Code.Produit, 2512)){
nourriture2013$is_cereal[i] <- TRUE
} else nourriture2013$is_cereal[i]<- FALSE
i = 1
while (i<nrow(nourriture2013)) {
if (isin(nourriture2013$Code.Produit, 2512)){
nourriture2013$is_cereal[i] <- TRUE
} else nourriture2013$is_cereal[i]<- FALSE
i = i + 1
}
View(nourriture2013)
while (i<nrow(nourriture2013)) {
if (isin(nourriture2013$Code.Produit, 2511)){
nourriture2013$is_cereal[i] <- TRUE
} else nourriture2013$is_cereal[i]<- FALSE
i = i + 1
}
i = 1
while (i<nrow(nourriture2013)) {
if (isin(nourriture2013$Code.Produit, 2511)){
nourriture2013$is_cereal[i] <- TRUE
} else nourriture2013$is_cereal[i]<- FALSE
i = i + 1
}
while (i<nrow(nourriture2013)) {
if (isin(nourriture2013$Code.Produit, 2511)){
nourriture2013$is_cereal[i] <- TRUE
} else {nourriture2013$is_cereal[i]<- FALSE}
i = i + 1
}
View(nourriture2013)
i = 1
while (i<nrow(nourriture2013)) {
if (isin(nourriture2013$Code.Produit[i], 2511)){
nourriture2013$is_cereal[i] <- TRUE
} else {nourriture2013$is_cereal[i]<- FALSE}
i = i + 1
}
iscereal<-function(table){
iscereal<-function(table){
iscereal<-function(table){
iscereal<-function(table){
iscereal<-function(table){
}
iscereal<-function(table){
iscereal<-function(table){
iscereal<-function(table){
iscereal<-function(table){
iscereal<-function(table){
iscereal<-function(table){ i <- 1
iscereal<-function(table){ i <- 1, while (i<nrow(table) {
iscereal<-function(table){ i <- 1 while (i<nrow(table) {
iscereal<-function(table){ i <- 1 %>% while (i<nrow(table) {
iscereal<-function(table){
iscereal<-function(table){
iscereal<-function(table){
iscereal<-
nourriture2013<-read.csv("nourriture2013.csv", encoding = "UTF-8")
for(i in 1:nrow(nourriture2013)) {
if (isin(nourriture2013$Code.Produit[i], 2511)){
nourriture2013$is_cereal[i] <- TRUE
} else {nourriture2013$is_cereal[i]<- FALSE}
}
View(nourriture2013)
View(nourriture2013)
nourriture2013<-read.csv("nourriture2013.csv", encoding = "UTF-8")
View(nourriture2013)
nourriture2013<-read.csv("nourriture2013.csv", encoding = "UTF-8")
nourriture2013<-read.csv("nourriture2013.csv", encoding = "UTF-8")
nourriture2013<-read.csv("nourriture2013.csv", encoding = "UTF-8")
library(prob)
nourriture2013<-read.csv("nourriture2013.csv", encoding = "UTF-8")
library(prob)
break()
break
### Cette fonction fait la même chose que table_faop mais permet de
### diviser les valeurs des colonnes au lieu de les multiplier.
table_faor <-
function(table1, table2, ..., code.élément = NA,
élément = NA, unité = NA,
coefficient = 1){
new_table<-inner_join(table1,select(table2, ..., Valeur),
by = c(...))%>%
mutate(Code.Élément = code.élément,
Élément = élément,
Unité = unité,
Valeur = round((Valeur.x/Valeur.y)*coefficient,0))%>%
select(c(1:11,16,13:14))
return(new_table)
}
jkrjkt
nourriture2013<-read.csv("nourriture2013.csv", encoding = "UTF-8")
for(i in 1:nrow(nourriture2013)) {
if (isin(nourriture2013$Code.Produit[i], 2511)){
nourriture2013$is_cereal[i] <- TRUE
} else {nourriture2013$is_cereal[i]<- FALSE}
}
View(nourriture2013)
iscereal<-
function(table){
for(i in 1:nrow(nourriture2013)) {
if (isin(nourriture2013$Code.Produit[i], 2511)){
nourriture2013$is_cereal[i] <- TRUE
} else {nourriture2013$is_cereal[i]<- FALSE}
}
return(table)
}
iscereal<-
function(table){
a = 8
for(i in 1:nrow(nourriture2013)) {
if (isin(nourriture2013$Code.Produit[i], 2511)){
nourriture2013$is_cereal[i] <- TRUE
} else {nourriture2013$is_cereal[i]<- FALSE}
}
return(table)
}
nourriture2013<-read.csv("nourriture2013.csv", encoding = "UTF-8")
iscereal(nourriture2013)
nourriture2013<-iscereal(nourriture2013)
nourriture2013<-read.csv("nourriture2013.csv", encoding = "UTF-8")
nourriture2013<-iscereal(nourriture2013)
View(nourriture2013)
for(i in 1:nrow(nourriture2013)) {
if (isin(nourriture2013$Code.Produit[i], 2511)){
nourriture2013$is_cereal[i] <- TRUE
} else {nourriture2013$is_cereal[i]<- FALSE}
}
nourriture2013<-read.csv("nourriture2013.csv", encoding = "UTF-8")
nourriture2013<-iscereal(nourriture2013)
iscereal<-
iscereal<-
function(table){
for(i in 1:nrow(table)) {
if (isin(table$Code.Produit[i], 2511)){
table$is_cereal[i] <- TRUE
} else {table$is_cereal[i]<- FALSE}
}
return(table)
}
nourriture2013<-iscereal(nourriture2013)
nourriture2013<-read.csv("nourriture2013.csv", encoding = "UTF-8")
nourriture2013<-iscereal(nourriture2013)
iscereal<-
iscereal<-
iscereal<-
function(table){
for(i in 1:nrow(table)) {
if (isin(table$Code.Produit[i], c(2511:2520, 2801))){
table$is_cereal[i] <- TRUE
} else {table$is_cereal[i]<- FALSE}
}
return(table)
}
nourriture2013<-iscereal(nourriture2013)
iscereal<-
function(table){
for(i in 1:nrow(table)) {
if (isin(table$Code.Produit[i], c(2511 or 2520 or 2801))){
table$is_cereal[i] <- TRUE
} else {table$is_cereal[i]<- FALSE}
}
return(table)
}
iscereal<-
function(table){
for(i in 1:nrow(table)) {
if (isin(table$Code.Produit[i], c(2511 || 2520 || 2801))){
table$is_cereal[i] <- TRUE
} else {table$is_cereal[i]<- FALSE}
}
return(table)
}
nourriture2013<-iscereal(nourriture2013)
iscereal<-
function(table){
for(i in 1:nrow(table)) {
if (isin(table$Code.Produit[i], 2511 || 2520 || 2801)){
table$is_cereal[i] <- TRUE
} else {table$is_cereal[i]<- FALSE}
}
return(table)
}
nourriture2013<-iscereal(nourriture2013)
iscereal<-
function(table){
for(i in 1:nrow(table)) {
if (isin(table$Code.Produit[i], 2511, 2520, 2801)){
table$is_cereal[i] <- TRUE
} else {table$is_cereal[i]<- FALSE}
}
return(table)
}
nourriture2013<-iscereal(nourriture2013)
iscereal<-
function(table){
for(i in 1:nrow(table)) {
if (table$Code.Produit[i] in c(2511:2520, 2801)){
table$is_cereal[i] <- TRUE
} else {table$is_cereal[i]<- FALSE}
}
return(table)
}
iscereal<-
function(table){
for(i in 1:nrow(table)) {
if (table$Code.Produit[i] %in% c(2511:2520, 2801)){
table$is_cereal[i] <- TRUE
} else {table$is_cereal[i]<- FALSE}
}
return(table)
}
nourriture2013<-iscereal(nourriture2013)
nourriture2013<-read.csv("nourriture2013.csv", encoding = "UTF-8")
nourriture2013<-read.csv("nourriture2013.csv", encoding = "UTF-8")
if (nourriture2013$Code.Produit %in% c(2511:2520, 2801)){
nourriture2013$is_cereal <- TRUE
} else {nourriture2013$is_cereal<- FALSE}
if (nourriture2013[,Code.Produit] %in% c(2511:2520, 2801)){
nourriture2013$is_cereal <- TRUE
} else {nourriture2013$is_cereal<- FALSE}
if (nourriture2013[,"Code.Produit"] %in% c(2511:2520, 2801)){
nourriture2013$is_cereal <- TRUE
} else {nourriture2013$is_cereal<- FALSE}
nourriture2013<-read.csv("nourriture2013.csv", encoding = "UTF-8")
if (nourriture2013["Code.Produit"] %in% c(2511:2520, 2801)){
nourriture2013$is_cereal <- TRUE
} else {nourriture2013$is_cereal<- FALSE}
nourriture2013<-read.csv("nourriture2013.csv", encoding = "UTF-8")
if (nourriture2013["Code.Produit"] %in% c(2511:2520, 2801)){
nourriture2013$is_cereal <- TRUE
} else {nourriture2013$is_cereal<- FALSE}
iscereal<-
function(table){
for(i in 1:nrow(table)) {
if (table$Code.Produit[i] %in% c(2511:2520, 2801)){
table$is_cereal[i] <- TRUE
} else {table$is_cereal[i]<- FALSE}
}
return(table)
}
sum(nourriture2013_cer$Valeur)
nourriture2013_cer<-
read.csv("nourriture2013_cér.csv", encoding = "UTF-8")
sum(nourriture2013_cer$Valeur)
nourriture2013_cer_totale<-sum(nourriture2013_cer$Valeur)
prop_nourriture_na<-na_tolale*100/(na_tolale+nourriture2013_cer_totale)
### D'après les données de la FAO monde/céréal/aliment pour animaux/2013
na_tolale <- 873548
prop_nourriture_na<-na_tolale*100/(na_tolale+nourriture2013_cer_totale)
nbre_sous_alimente <- 800.1*10^6
nbre_sous_alimente_prct <-
(nbre_sous_alimente/pop2013_totale)*100
### On charge les library utile à notre projet
library(dplyr)
library(DT)
### table_faop prend 5 arguments fixent en entré
### -table1 et la table de la FAO principale
### -table2 est la table de la FAO secondaire
### -code.élément, élément, unité, permettent de changer les colonnes du
### même nom dans la table1.
### -On peut multiplier le résultat du produit effectué par l'argument
### coefficient.
### ... sont le nom des colonnes par lesquels nous voulons effectuer la
### jointure interne.
###
### table_faop permet de creer une nouvelle table FAO à partir de deux
### table FAO qui aura pour valeurs les produits des valeurs des 2
### tables choisies.
table_faop <-
function(table1, table2, ..., code.élément = NA,
élément = NA, unité = NA,
coefficient = 1){
### On effectue une jointure interne (pas de NA dans les valeurs)
### entre table1 et la colonne Valeur de table2 par ...)
new_table<-inner_join(table1,select(table2, ..., Valeur),
by = c(...))%>%
### On change les valeurs des colonnes que l'on souhaite
mutate(Code.Élément = code.élément,
Élément = élément,
Unité = unité,
### On effectue le produit entre les valeurs de colonnes
### puis on multiplie le résultat par coefficient
Valeur = round(Valeur.x*Valeur.y*coefficient,0))%>%
### On supprime les colonne valeur de table1 et table2
select(c(1:11,16,13:14))
### On renvoie la nouvelle table
return(new_table)
}
### Cette fonction fait la même chose que table_faop mais permet de
### diviser les valeurs des colonnes au lieu de les multiplier.
table_faor <-
function(table1, table2, ..., code.élément = NA,
élément = NA, unité = NA,
coefficient = 1){
new_table<-inner_join(table1,select(table2, ..., Valeur),
by = c(...))%>%
mutate(Code.Élément = code.élément,
Élément = élément,
Unité = unité,
Valeur = round((Valeur.x/Valeur.y)*coefficient,0))%>%
select(c(1:11,16,13:14))
return(new_table)
}
### iscereal pend un argument en entré:
### -la table à laquelle on va ajouter une colonne is_cereal
### ayant pour valeur TRUE or FALSE
iscereal<-
function(table){
### Pour toutes les lignes de la table
for(i in 1:nrow(table)) {
### On crée une nouvelle colonne, si le produit est céréalier
### on met TRUE
if (table$Code.Produit[i] %in% c(2511:2520, 2801)){
table$is_cereal[i] <- TRUE
### sinon on met false
} else {table$is_cereal[i]<- FALSE}
}
#On renvoie la table modifiée
return(table)
}
### On charge les table FAO utile à notre projet
pop2013_corrigee<-read.csv("pop2013_corrigee.csv")
pop2017_corrigee<-read.csv("pop2017_corrigee.csv")
da2013_e<-read.csv("da2013_e.csv", encoding = "UTF-8")
da2013_p<-read.csv("da2013_p.csv", encoding = "UTF-8")
### On filtre les 0 pour gagner en précision
nourriture2013<-read.csv("nourriture2013.csv", encoding = "UTF-8")%>%
filter(Valeur >=1, Symbole != "A")
pays_sous_alimentes2013<-
read.csv("pays_sous_alimente2013", encoding = "UTF-8")
setwd("C:/Users/Bruno/Desktop/ouvrablesFormations/P3_pinos_bruno")
pays_sous_alimentes2013<-
read.csv("pays_sous_alimente2013", encoding = "UTF-8")
pays_sous_alimentes2013<-
read.csv("pays_sous_alimente2013.csv", encoding = "UTF-8")
pays_sous_alimentes2013<-
read.csv("pays_sous_alimente2013.csv", encoding = "UTF-8")%>%
filter(Symbole == F)
pays_sous_alimentes2013<-
read.csv("pays_sous_alimente2013.csv", encoding = "UTF-8")%>%
filter("Symbole" == F)
pays_sous_alimentes2013<-
read.csv("pays_sous_alimente2013.csv", encoding = "UTF-8")
### On filtre les 0 pour gagner en précision
nourriture2013<-read.csv("nourriture2013.csv", encoding = "UTF-8")%>%
filter(Valeur >=1, Symbole != "A")
### On charge les library utile à notre projet
library(dplyr)
library(DT)
### On filtre les 0 pour gagner en précision
nourriture2013<-read.csv("nourriture2013.csv", encoding = "UTF-8")%>%
filter(Valeur >=1, Symbole != "A")
View(nourriture2013)
setwd("C:/Users/Bruno/Desktop/ouvrablesFormations/P3_pinos_bruno")
### On filtre les 0 pour gagner en précision
nourriture2013<-read.csv("nourriture2013.csv", encoding = "UTF-8")%>%
filter(Valeur >=1, Symbole != "A")
### On filtre les 0 pour gagner en précision
nourriture2013<-read.csv("nourriture2013.csv", encoding = "UTF-8")%>%
filter(Valeur >=1, Symbole != "A")
